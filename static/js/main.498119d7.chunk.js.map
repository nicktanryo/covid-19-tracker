{"version":3,"sources":["services/service.tsx","components/Header.tsx","components/InfoBox.tsx","components/Map.tsx","components/InfoBar.tsx","components/Table.tsx","components/Graph.tsx","components/Copyright.tsx","components/Loading.tsx","components/Covid.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["URL","countries","undefined","getAllData","a","axios","get","data","getCountriesList","map","country","getCountryData","getCountryListAndCases","name","cases","recovered","deaths","sort","b","getHistoryCases","param","url","processedData","timeline","getCountryLocation","countryInfo","getCountriesLocationData","iso2","flag","lat","lng","long","population","Header","DarkTheme","useContext","DarkThemeContext","classes","makeStyles","theme","appbar","backgroundColor","logo","height","color","marginRight","spacing","svg","marginLeft","button","title","select","maxHeight","useStyles","SetDarkTheme","SetDarkThemeContext","useState","countriesList","setCountriesList","SelectedCountries","SelectedCountryContext","useEffect","countrieslist","AppBar","position","className","Toolbar","Grid","container","direction","justify","item","alignItems","Typography","variant","display","FormControl","size","Select","value","selectedCountry","onChange","event","setSelectedCountry","target","MenuItem","key","style","index","Button","onClick","prev","InfoBox","total","card","cursor","justifyContent","borderLeft","Card","elevation","CardContent","align","sign","toLocaleString","formatNumber","media","paddingTop","border","right","textAlign","left","TableRow","field","Map","coordinate","ViewType","ViewTypeContext","SelectedCountry","mapData","setMapData","Paper","center","zoom","minZoom","TileLayer","countryData","fillType","fillColor","multiplier","Circle","fillOpacity","radius","Math","sqrt","Popup","closeButton","maxWidth","CardMedia","image","InfoBar","selectedCountryData","setViewType","xs","todayCases","todayRecovered","todayDeaths","controller","padding","overflow","table","minWidth","text","fontSize","StyledTableRow","withStyles","createStyles","root","palette","action","hover","TableData","tableData","setTableData","getdata","TableContainer","component","Table","stickyHeader","TableHead","TableCell","TableBody","paddingLeft","paddingRight","option","legend","element","point","maintainAspectRatio","tooltips","mode","intersect","callbacks","label","tooltipItem","numeral","format","scales","xAxes","type","time","parser","tooltipFormat","yAxes","gridLines","ticks","callback","values","Graph","setTitle","graphData","setGraphData","then","labels","Object","keys","datasets","borderColor","options","Copyright","Link","href","Date","getFullYear","width","Loading","CircularProgress","React","createContext","centerCoordinate","Covid","loadData","setLoadData","setSelectedCountryData","setCoordinate","viewType","Provider","md","lg","margin","App","darkTheme","setDarkTheme","createMuiTheme","ThemeProvider","minHeight","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.498119d7.chunk.js","sourcesContent":["import axios from \"axios\"\n\nconst URL = \"https://disease.sh/v3/covid-19\"\n\nlet countries: Array<FullResponseData> | undefined = undefined\n\nexport default {\n    getAllData: async (): Promise<boolean> => {\n        const { data } = await axios.get(`${URL}/countries`)\n        countries = data\n        return true\n    },\n    getCountriesList: (): Array<String> => {\n        return countries?.map((country) => (country as any).country as String) as String[]\n    },\n    getCountryData: async (country: String): Promise<any> => {\n        const { data } = await axios.get(`${URL}/${country === \"WORLDWIDE\" ? \"all\" : `countries/${country}`}`)\n        return data\n    },\n    getCountryListAndCases: (): Array<{ name: String, cases: Number, recovered: Number, deaths: Number }> => {\n        return countries?.map(country => ({ name: country.country, cases: country.cases, recovered: country.recovered, deaths: country.deaths }))\n            .sort((a, b) => (b.cases as number) - (a.cases as number)) as Array<any>\n    },\n    getHistoryCases: async (country: String): Promise<TimelineData> => {\n        const param = (country === \"WORLDWIDE\" || !country) ? \"all\" : country\n        const url = `${URL}/historical/${param}?lastdays=120`\n        const { data } = await axios.get(url)\n        const processedData = country !== \"WORLDWIDE\" ? data : ({\n            country: \"Worldwide\",\n            timeline: data\n        })\n        return processedData\n    },\n    getCountryLocation: async (country: String): Promise<any> => {\n        const { data } = await axios.get(`${URL}/${country === \"WORLDWIDE\" ? \"all\" : `countries/${country}`}`)\n        return data.countryInfo\n    },\n    getCountriesLocationData: (): Array<MapData> => {\n        return (countries as Array<FullResponseData>).map((country: FullResponseData) => ({\n            name: country.country,\n            iso2: country.countryInfo.iso2,\n            flag: country.countryInfo.flag,\n            lat: country.countryInfo.lat,\n            lng: country.countryInfo.long,\n            cases: country.cases,\n            deaths: country.deaths,\n            recovered: country.recovered,\n            population: country.population\n\n        }))\n    }\n}\n\nexport interface TimelineData {\n    country: String\n    timeline: {\n        cases: {}\n        deaths: {}\n        recovered: {}\n    }\n}\n\ninterface FullResponseData {\n    country: String\n    countryInfo: {\n        lat: Number\n        long: Number\n        flag: String\n        iso2: String\n    }\n    cases: Number\n    todayCases: Number\n    deaths: Number\n    todayDeaths: Number\n    recovered: Number\n    todayRecovered: Number\n    population: Number\n}\n\nexport interface MapData {\n    name: String\n    iso2: String\n    flag: String\n    lat: Number\n    lng: Number\n    cases: Number\n    deaths: Number\n    recovered: Number\n    population: Number\n}","import React, { ReactElement, useContext, useEffect, useState, SetStateAction } from 'react'\n\nimport GpsFixedRoundedIcon from '@material-ui/icons/GpsFixedRounded';\nimport Brightness4Icon from '@material-ui/icons/Brightness4';\nimport { AppBar, Toolbar, Grid, Typography, FormControl, Select, MenuItem, makeStyles, Button } from '@material-ui/core';\n\nimport { DarkThemeContext, SetDarkThemeContext } from \"../App\"\nimport { SelectedCountryContext, CSelectedCountryContext } from \"./Covid\"\nimport countries from \"../services/service\"\n\nexport default function Header(): ReactElement {\n    const DarkTheme = useContext<boolean>(DarkThemeContext)\n    const useStyles = makeStyles((theme) => ({\n        appbar: {\n            backgroundColor: DarkTheme ? \"#424242\" : \"white\" // \"#252a34\"\n        },\n        logo: {\n            height: \"100%\",\n            color: \"hotpink\",\n            marginRight: theme.spacing(1),\n        },\n        svg: {\n            marginLeft: theme.spacing(1)\n        },\n        button: {\n            marginLeft: theme.spacing(1)\n        },\n        title: {\n            height: \"100%\"\n        },\n        select: {\n            maxHeight: \"100px\",\n        }\n    }))\n    const classes = useStyles()\n\n    const SetDarkTheme = useContext<React.Dispatch<SetStateAction<boolean>> | undefined>(SetDarkThemeContext)\n\n    const [countriesList, setCountriesList] = useState<Array<String>>([])\n    const SelectedCountries = useContext<CSelectedCountryContext | undefined>(SelectedCountryContext)\n\n    useEffect(() => {\n        const countrieslist = countries.getCountriesList()\n        setCountriesList(countrieslist)\n    }, [])\n\n    return (\n        <AppBar position=\"static\" className={classes.appbar}>\n            <Toolbar>\n                <Grid container direction=\"row\" justify=\"space-between\">\n\n                    <Grid item>\n                        <Grid container alignItems=\"center\" className={classes.title}>\n                            <Grid item><GpsFixedRoundedIcon className={classes.logo} /></Grid>\n\n                            <Grid item>\n                                <Typography variant=\"h6\" display=\"inline\" color={DarkTheme ? \"textSecondary\" : \"textPrimary\"}>\n                                    COVID 19 Tracker\n                                </Typography>\n                            </Grid>\n                        </Grid>\n                    </Grid>\n\n                    <Grid item>\n                        <FormControl size=\"small\">\n                            <Select\n                                variant=\"outlined\"\n                                value={SelectedCountries?.selectedCountry}\n                                color={DarkTheme ? \"secondary\" : \"primary\"}\n                                className={classes.select}\n                                onChange={(event) => SelectedCountries?.setSelectedCountry(event.target.value as String)}\n                            >\n                                <MenuItem key={\"worldwide\"} value={\"WORLDWIDE\"} style={{ backgroundColor: \"rgba(166, 220, 239, 0.3)\" }}><b>Worldwide</b></MenuItem>\n\n                                {\n                                    countriesList && countriesList.map((country, index) => {\n                                        return <MenuItem key={index} value={country as string} >{country}</MenuItem>\n                                    })\n                                }\n\n                            </Select>\n                        </FormControl>\n\n                        <Button variant=\"contained\" color={DarkTheme ? \"secondary\" : \"default\"} className={classes.button} onClick={() => SetDarkTheme && SetDarkTheme(prev => !prev)} >\n                            {DarkTheme ? \"LIGHT\" : \"DARK\"} <Brightness4Icon className={classes.svg} />\n                        </Button>\n                    </Grid>\n\n                </Grid>\n            </Toolbar>\n        </AppBar>\n    )\n}\n","import React, { ReactElement } from 'react'\nimport { Card, CardContent, Typography, makeStyles, Theme } from '@material-ui/core'\n\ninterface Props {\n    title: String\n    total: Number | undefined\n    cases: Number | undefined\n    color: String\n}\n\n\n\nexport default function InfoBox({ title, total, cases, color }: Props): ReactElement {\n    const useStyles = makeStyles((theme: Theme) => ({\n        card: {\n            cursor: \"pointer\",\n            alignItems: \"center\",\n            justifyContent: \"center\",\n            \"&:hover\": {\n                borderLeft: `5px solid ${color}`\n            }\n        }\n    }))\n    const classes = useStyles()\n    return (\n        <Card className={classes.card} elevation={8}>\n            <CardContent>\n                <Typography color=\"textSecondary\" align=\"center\">\n                    {title}\n                </Typography>\n                <Typography variant=\"h5\" align=\"center\">\n                    {cases ? formatNumber(cases) : 0}\n                </Typography>\n                <Typography color=\"textSecondary\" align=\"center\">\n                    {total ? total.toLocaleString() : 0} Total\n                </Typography>\n            </CardContent>\n        </Card>\n    )\n}\n\nfunction formatNumber(cases: Number): String {\n    let sign = \"\"\n    if (cases > 0) sign = \"+\"\n    else if (cases < 0) sign = \"-\"\n    return sign + \" \" + cases.toLocaleString()\n}","import React, { ReactElement, useState, useEffect, useContext } from 'react'\n\nimport { Paper, makeStyles, Card, CardMedia, CardContent } from '@material-ui/core'\n\nimport { Map as LeafletMap, TileLayer, Popup, Circle } from \"react-leaflet\"\nimport 'leaflet/dist/leaflet.css';\n\nimport countries, { MapData } from \"../services/service\"\nimport { SelectedCountryContext, CSelectedCountryContext, ViewTypeContext, Coordinate } from \"./Covid\"\n\ninterface Props {\n    coordinate: Coordinate\n}\n\nconst useStyles = makeStyles((theme) => ({\n    media: {\n        height: 0,\n        paddingTop: '56.25%', // 16:9\n        border: \"1px solid black\"\n    },\n    right: {\n        textAlign: \"right\"\n    },\n    left: {\n        textAlign: \"left\"\n    }\n}))\n\nfunction TableRow({ field, value }: { field: string, value: string }): ReactElement {\n    const classes = useStyles()\n    return (\n        <tr>\n            <td className={classes.left}>{field}</td>\n            <td>:</td>\n            <td className={classes.right}>{field === \"Country\" ? <b>{value}</b> : value}</td>\n        </tr>\n    )\n}\n\nexport default function Map({ coordinate }: Props): ReactElement {\n    const classes = useStyles()\n\n    const ViewType = useContext<string>(ViewTypeContext)\n\n    const SelectedCountry = useContext<CSelectedCountryContext | undefined>(SelectedCountryContext)\n\n    const [mapData, setMapData] = useState<Array<MapData> | undefined>(undefined)\n\n    useEffect(() => {\n        const data: Array<MapData> = countries.getCountriesLocationData()\n        setMapData(data)\n    }, [])\n\n    return (\n        <Paper className={\"map\"} elevation={8}>\n            <LeafletMap center={coordinate} zoom={SelectedCountry?.selectedCountry === \"WORLDWIDE\" ? 2 : 5} className=\"leaflet-container\" minZoom={1}>\n                <TileLayer\n                    url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n                />\n                {mapData && (\n                    mapData.map((countryData: MapData) => {\n                        const { lat, lng, flag, cases, deaths, recovered, population, iso2, name } = countryData\n                        const { color, fillColor, multiplier } = fillType[ViewType as keyof FillType]\n                        return (\n                            <Circle key={`${name}-${iso2}`}\n                                center={{ lat: lat as number, lng: lng as number }}\n                                color={color} fillColor={fillColor} fillOpacity={0.4}\n                                radius={Math.sqrt(countryData[ViewType as keyof MapData] as number) * multiplier}\n                            >\n                                <Popup closeButton={false} maxHeight={250} maxWidth={180}>\n                                    <Card>\n                                        <CardMedia\n                                            className={classes.media}\n                                            image={flag as string}\n                                            title={name as string}\n                                        />\n                                        <CardContent>\n\n                                            <table>\n                                                <tbody>\n                                                    <TableRow field=\"Country\" value={name as string} />\n                                                    <TableRow field=\"Population\" value={population.toLocaleString()} />\n                                                    <TableRow field=\"Cases\" value={cases.toLocaleString()} />\n                                                    <TableRow field=\"Deaths\" value={deaths.toLocaleString()} />\n                                                    <TableRow field=\"Recovered\" value={recovered.toLocaleString()} />\n                                                </tbody>\n                                            </table>\n                                        </CardContent>\n                                    </Card>\n                                </Popup>\n                            </Circle>\n                        )\n                    })\n                )}\n            </LeafletMap>\n        </Paper >\n    )\n}\n\ninterface FillType {\n    cases: {}\n    deaths: {}\n    recovered: {}\n}\n\nexport const fillType = {\n    cases: {\n        color: \"red\",\n        fillColor: \"hotpink\",\n        multiplier: 800\n    },\n    deaths: {\n        color: \"darkred\",\n        fillColor: \"red\",\n        multiplier: 4000\n    },\n    recovered: {\n        color: \"green\",\n        fillColor: \"lightgreen\",\n        multiplier: 1400\n    }\n}","import React, { ReactElement, SetStateAction } from 'react'\nimport { Grid } from '@material-ui/core'\n\nimport InfoBox from \"./InfoBox\"\nimport { InfoBarData } from \"./Covid\"\nimport { fillType } from \"./Map\"\n\ninterface Props {\n    selectedCountryData: InfoBarData | undefined\n    setViewType: React.Dispatch<SetStateAction<string>>\n}\n\nexport default function InfoBar({ selectedCountryData, setViewType }: Props): ReactElement {\n    return (\n        <>\n            <Grid item xs={4} onClick={() => setViewType(\"cases\")}>\n                <InfoBox color={fillType.cases.color} title=\"Cases\" cases={selectedCountryData?.todayCases} total={selectedCountryData?.cases} />\n            </Grid>\n            <Grid item xs={4} onClick={() => setViewType(\"recovered\")}>\n                <InfoBox color={fillType.recovered.color} title=\"Recovered\" cases={selectedCountryData?.todayRecovered} total={selectedCountryData?.recovered} />\n            </Grid>\n            <Grid item xs={4} onClick={() => setViewType(\"deaths\")}>\n                <InfoBox color={fillType.deaths.color} title=\"Deaths\" cases={selectedCountryData?.todayDeaths} total={selectedCountryData?.deaths} />\n            </Grid>\n        </>\n    )\n}\n","import React, { ReactElement, useEffect, useState, useContext } from 'react'\nimport { TableContainer, Paper, Table, TableHead, TableRow, TableCell, makeStyles, TableBody, Typography, withStyles, createStyles, Theme, Grid } from '@material-ui/core'\n\nimport countries from \"../services/service\"\nimport { CSelectedCountryContext, SelectedCountryContext } from \"./Covid\"\n\nconst useStyles = makeStyles((theme) => ({\n    controller: {\n        padding: theme.spacing(2)\n    },\n    overflow: {\n        display: \"grid\",\n        overflow: \"hidden\",\n        height: \"100%\"\n    },\n    container: {\n        maxHeight: \"55vh\"\n    },\n    table: {\n        minWidth: 100\n    },\n    text: {\n        fontSize: \"0.9rem\"\n    }\n}))\n\nconst StyledTableRow = withStyles((theme: Theme) =>\n    createStyles({\n        root: {\n            cursor: \"pointer\",\n            '&:nth-of-type(odd)': {\n                backgroundColor: theme.palette.action.hover,\n            },\n            \"&:hover\": {\n                backgroundColor: \"#c0c0c0\"\n            }\n        },\n    }),\n)(TableRow);\n\nexport default function TableData(): ReactElement {\n    const classes = useStyles()\n\n    const SelectedCountry = useContext<CSelectedCountryContext | undefined>(SelectedCountryContext)\n\n    const [tableData, setTableData] = useState<Array<any>>([])\n\n    useEffect(() => {\n        async function getdata() {\n            const data = countries.getCountryListAndCases()\n            setTableData(data)\n        }\n        getdata()\n    }, [])\n    return (\n        <Grid className={classes.controller}>\n            <TableContainer component={Paper} className={classes.container}>\n                <Table stickyHeader className={classes.table}>\n                    <TableHead>\n                        <TableRow>\n                            <TableCell align=\"left\" onClick={() => SelectedCountry?.setSelectedCountry(\"WORLDWIDE\")} style={{ cursor: \"pointer\" }}>\n                                Country\n                            </TableCell>\n                            <TableCell align=\"right\">\n                                Cases\n                            </TableCell>\n                            <TableCell align=\"right\">\n                                Deaths\n                            </TableCell>\n                            <TableCell align=\"right\">\n                                Recovered\n                            </TableCell>\n                        </TableRow>\n                    </TableHead>\n                    <TableBody>\n                        {\n                            tableData.map((data, index) => {\n                                return (\n                                    <StyledTableRow key={index} onClick={() => SelectedCountry?.setSelectedCountry(data.name)} className=\"table-li\">\n                                        <TableCell align=\"left\">\n                                            <Typography className={classes.text}>\n                                                {data.name}\n                                            </Typography>\n                                        </TableCell>\n                                        <TableCell align=\"right\">\n                                            <Typography className={classes.text}>\n                                                {data.cases.toLocaleString()}\n                                            </Typography>\n                                        </TableCell>\n                                        <TableCell align=\"right\">\n                                            <Typography className=\"table-li-red\">\n                                                {data.deaths.toLocaleString()}\n                                            </Typography>\n                                        </TableCell>\n                                        <TableCell align=\"right\">\n                                            <Typography className=\"table-li-green\">\n                                                {data.recovered.toLocaleString()}\n                                            </Typography>\n                                        </TableCell>\n                                    </StyledTableRow>\n                                )\n                            })\n                        }\n                    </TableBody>\n                </Table>\n            </TableContainer>\n        </Grid>\n    )\n}\n","import React, { ReactElement, useState, useEffect, useContext } from 'react'\nimport { Grid, makeStyles, Card } from '@material-ui/core'\nimport { Line } from \"react-chartjs-2\"\nimport numeral from \"numeral\"\n\nimport countries, { TimelineData } from \"../services/service\"\nimport { SelectedCountryContext, CSelectedCountryContext } from \"./Covid\"\n\nconst useStyles = makeStyles((theme) => ({\n    controller: {\n        paddingTop: theme.spacing(2),\n        paddingLeft: theme.spacing(2),\n        paddingRight: theme.spacing(2)\n    },\n    card: {\n        padding: theme.spacing(1)\n    }\n}))\n\nconst option = {\n    legend: {\n        display: true\n    },\n    element: {\n        point: {\n            radius: 0\n        }\n    },\n    maintainAspectRatio: true,\n    tooltips: {\n        mode: \"index\",\n        intersect: false,\n        callbacks: {\n            label: function (tooltipItem: any, data: any) {\n                return numeral(tooltipItem.value).format(\"+0.0\")\n            }\n        }\n    },\n    scales: {\n        xAxes: [\n            {\n                type: \"time\",\n                time: {\n                    parser: \"MM/DD/YY\",\n                    tooltipFormat: \"ll\"\n                }\n            }\n        ],\n        yAxes: [\n            {\n                gridLines: {\n                    display: false\n                },\n                ticks: {\n                    callback: function (value: number, index: number, values: any) {\n                        return numeral(value as number).format(\"0a\")\n                    }\n                }\n            }\n        ]\n    }\n}\n\nexport default function Graph(): ReactElement {\n    const classes = useStyles()\n\n    const SelectedCountry = useContext<CSelectedCountryContext | undefined>(SelectedCountryContext)\n    const [title, setTitle] = useState<String>(\"...\")\n    const [graphData, setGraphData] = useState<{} | undefined>(undefined)\n\n    useEffect(() => {\n        function getdata() {\n            countries.getHistoryCases(SelectedCountry?.selectedCountry as String)\n                .then((data: TimelineData) => {\n                    setTitle(data.country)\n                    setGraphData({\n                        labels: Object.keys(data.timeline.cases),\n                        datasets: [\n                            {\n                                label: \"Cases\",\n                                data: Object.values(data.timeline.cases),\n                                borderColor: \"rgba(0, 0, 0, 1)\",\n                                backgroundColor: \"rgba(0, 0, 120, 0.2\",\n                                legend: true\n                            },\n                            {\n                                label: \"Deaths\",\n                                data: Object.values(data.timeline.deaths),\n                                borderColor: \"rgba(255, 99, 132, 0.6)\",\n                                backgroundColor: \"rgba(120, 0, 0, 0.2\",\n                                legend: true\n                            },\n                            {\n                                label: \"Recovered\",\n                                data: Object.values(data.timeline.recovered),\n                                borderColor: \"rgba(90, 255, 132, 0.6)\",\n                                backgroundColor: \"rgba(0, 120, 0, 0.2\",\n                                legend: true\n                            }\n                        ]\n                    })\n                })\n        }\n        getdata()\n    }, [SelectedCountry])\n\n    return (\n        <Grid className={classes.controller}>\n            <Card className={classes.card} elevation={8}>\n                LOCATION : {title}\n                {graphData && (\n                    <Line\n                        data={graphData}\n                        options={option}\n                    />\n                )}\n            </Card>\n        </Grid>\n    )\n}\n","import React from 'react'\nimport { Typography, Link } from \"@material-ui/core\"\n\nexport default function Copyright(): JSX.Element {\n    return (\n        <Typography variant=\"body2\" color=\"textSecondary\" align=\"center\">\n            {'Copyright © '}\n            <Link color=\"inherit\" href=\"https://www.github.com/nicktanryo\">\n                Nicholas Tanryo\n            </Link>{' '}\n            {new Date().getFullYear()}\n            {'.'}\n        </Typography>\n    )\n}","import React, { ReactElement } from \"react\";\nimport { CircularProgress, makeStyles, Theme } from \"@material-ui/core/\";\n\nconst useStyles = makeStyles((theme: Theme) => ({\n    container: {\n        width: \"100%\",\n        height: \"100vh\",\n        display: \"flex\",\n        justifyContent: \"center\",\n        alignItems: \"center\",\n    },\n}));\n\nexport default function Loading(): ReactElement {\n    const classes = useStyles();\n    return (\n        <div className={classes.container}>\n            <CircularProgress />\n        </div>\n    );\n}\n","import React, {\n    ReactElement,\n    useEffect,\n    useState,\n    SetStateAction,\n} from \"react\";\nimport Header from \"./Header\";\nimport { Grid } from \"@material-ui/core\";\n\nimport countries from \"../services/service\";\nimport InfoBar from \"./InfoBar\";\nimport Map from \"./Map\";\nimport Table from \"./Table\";\nimport Graph from \"./Graph\";\nimport Copyright from \"./Copyright\";\nimport Loading from \"./Loading\";\n\nexport interface CSelectedCountryContext {\n    selectedCountry: String;\n    setSelectedCountry: React.Dispatch<SetStateAction<String>>;\n}\nexport const SelectedCountryContext = React.createContext<\n    CSelectedCountryContext | undefined\n>(undefined);\nexport const ViewTypeContext = React.createContext<string>(\"cases\");\n\nexport interface InfoBarData {\n    todayCases: Number;\n    cases: Number;\n    todayRecovered: Number;\n    recovered: Number;\n    todayDeaths: Number;\n    deaths: Number;\n}\n\nexport interface Coordinate {\n    lat: number;\n    lng: number;\n}\n\nconst centerCoordinate: Coordinate = {\n    lat: 20,\n    lng: 0,\n};\n\nexport default function Covid(): ReactElement {\n    const [loadData, setLoadData] = useState<boolean>(false);\n    const [selectedCountry, setSelectedCountry] = useState<String>(\"WORLDWIDE\");\n    const [selectedCountryData, setSelectedCountryData] = useState<\n        InfoBarData | undefined\n    >(undefined);\n    const [coordinate, setCoordinate] = useState<Coordinate>(centerCoordinate);\n    const [viewType, setViewType] = useState<string>(\"cases\");\n\n    useEffect(() => {\n        async function getdata(): Promise<void> {\n            setLoadData(await countries.getAllData());\n        }\n        getdata();\n    }, []);\n\n    useEffect(() => {\n        async function getdata() {\n            const data = await countries.getCountryData(selectedCountry);\n            setSelectedCountryData(data);\n\n            if (selectedCountry === \"WORLDWIDE\")\n                setCoordinate(centerCoordinate);\n            else\n                countries\n                    .getCountryLocation(selectedCountry as String)\n                    .then(({ lat, long }) => {\n                        setCoordinate({ lat: lat, lng: long });\n                    });\n        }\n        getdata();\n    }, [selectedCountry]);\n\n    return loadData ? (\n        <SelectedCountryContext.Provider\n            value={{ selectedCountry, setSelectedCountry }}\n        >\n            <ViewTypeContext.Provider value={viewType}>\n                <Grid container direction=\"row\" justify=\"space-between\">\n                    <Grid\n                        item\n                        xs={12}\n                        md={6}\n                        lg={8}\n                        container\n                        direction=\"column\"\n                        justify=\"space-between\"\n                    >\n                        <Grid item>\n                            <Header />\n                        </Grid>\n\n                        <Grid item>\n                            <Map coordinate={coordinate} />\n                        </Grid>\n\n                        {/* <Grid item container>\n                                <Grid item xs={12}>\n                                    <Graph />\n                                </Grid>\n                            </Grid> */}\n\n                        <Grid item container justify=\"space-around\" spacing={1}>\n                            <InfoBar\n                                selectedCountryData={selectedCountryData}\n                                setViewType={setViewType}\n                            />\n                        </Grid>\n                    </Grid>\n\n                    <Grid\n                        item\n                        xs={12}\n                        md={6}\n                        lg={4}\n                        container\n                        direction=\"column\"\n                        justify=\"space-between\"\n                    >\n                        <Grid item>\n                            {\" \"}\n                            {/*/xs={12}*/}\n                            <Table />\n                        </Grid>\n\n                        {/* <Grid item xs={12}>\n                                <Map />\n                            </Grid> */}\n\n                        <Grid item container>\n                            <Grid item xs={12}>\n                                <Graph />\n                            </Grid>\n                        </Grid>\n                    </Grid>\n                </Grid>\n                <Grid style={{ margin: \"25px auto 25px auto\" }}>\n                    <Copyright />\n                </Grid>\n            </ViewTypeContext.Provider>\n        </SelectedCountryContext.Provider>\n    ) : (\n        <Loading />\n    );\n}\n","import React, { ReactElement, useState, SetStateAction } from 'react'\nimport \"./App.css\"\nimport Covid from './components/Covid'\n\nimport \"leaflet/dist/leaflet.css\"\nimport { createMuiTheme, ThemeProvider, Paper } from '@material-ui/core'\n\nexport const DarkThemeContext = React.createContext<boolean>(false)\nexport const SetDarkThemeContext = React.createContext<React.Dispatch<SetStateAction<boolean>> | undefined>(undefined)\n\n\nexport default function App(): ReactElement {\n    const [darkTheme, setDarkTheme] = useState<boolean>(false)\n    const theme = createMuiTheme({\n        palette: {\n            type: darkTheme ? \"dark\" : \"light\"\n        }\n    })\n\n    return (\n        <ThemeProvider theme={theme}>\n            <DarkThemeContext.Provider value={darkTheme}>\n                <SetDarkThemeContext.Provider value={setDarkTheme}>\n                    <Paper className=\"App\" elevation={0} style={{ minHeight: \"100vh\" }}>\n                        <Covid />\n                    </Paper>\n                </SetDarkThemeContext.Provider>\n            </DarkThemeContext.Provider>\n        </ThemeProvider>\n    )\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}